○9/19
・9:50
普通に四角を作るか斜めに作るかの二択なんだけど、
どっちの方が点数に貢献するんだろ･･･。
直感は斜めなんだけど、ケースにもよるんだろうな。
とりあえず作ってみるか。
ただ、どうやって判定させよう･･･。
普通に探せば良いのかもしれないけど、共通の辺が存在しないか判定するのがめんどくさい
全探索する･･･？そんなアホなことやってらんねぇよなぁ･･･。
ん？Nは31～61か。ってことは直線として利用したかはboolean型4次元配列でもいける？
923521≦N^4≦13845841≒1.4e7か。いけるな？んじゃあその方向で～。
とりあえず、書いてみようか。

・10:50
外骨格(入力受け取りと出力)はできた。
あと今気付いた。座標は0-indexedなんだ。楽で良いね。
さて、まずはまっすぐな四角を作ってみる。楽そうだし。

・11:30
ん～～～～～～～めんどくさい！
とりあえずメソッド作って良い感じには出来たんじゃないかな。
試してみるか･･･。->全然正しい出力じゃねぇ･･･。
何で辺が重なっちゃうんだ？？？途中に点があればfalseで弾いてるはずなんだが･･･。
あ、新しく作った点打ってなかった。

・12:50
なんとか通った。
14,048,321 -> 16,972,120(+2,923,799)
軽く四角が作れる場所を作ってみただけだとやっぱりこれくらいしか伸びないか。
さて、次は斜めの四角か･･･

・15:00
気付いてしまった。
辺が重なってるかは普通に外積使えば良いじゃん･･･。
なんだよ･･･俺ずっと二点選んで使ってないか調べるクソ全探索しちゃってたよ･･･。
書き換えるか･･･ついでに飽きたからこの仕事は明日の自分に託す。頼んだぞ･･･。


○9/20
・9:00
なんとか立式出来た。ただ、思っているより点が伸びない･･･。
for文で探してるからかなぁ･･･。けどめんどくさいよなぁ･･･。
やるしかないか･･･。これ以降はver2で。
作った。外側一周してどんどん内側に入る感じ。
16,972,120 -> 17,478,226(+506,106)
念のためwhile(loop-->0)してるけどそんな点数に寄与はして無さそう。
一度作ったものを破壊するのは相当面倒(一度打った点を利用してる場合がある)なので、
なるべく最良の点を打ち続けたいんだが、如何様にすべきか･･･。

・9:25
ん？既に作った四角形なら辺上に点打っても文句言われなさそうだな･･･。
ってことはやっぱりwhile文で探しまくるしかないのかな･･･。
17,478,226 -> 18,149,429(+671,203)

・9:50
今気付いた。xとy逆に考えてたし±も逆に考えてた。
まぁ出力に影響は無いから･･･良いか･･･？

・11:20
18,149,429 -> 18,373,112(+223,683)
微増やんけ･･･。
重なってるかどうかの判定がちょっと怪しいんだよなぁ･･･。
もっといっぱい探せるはずなんだけど(目視でも見つかるし)、やっぱりそこが難関って感じかな。
ここをどうにか出来れば結構点数上がる気がするし。
ということは、実行時間無視してゴリゴリ計算させた方が良いのかな？

・12:10
判定を書き換えてみた。
18,373,112 -> 19,208,174(+835,062)
やっぱり判定まわりが怪しそう。
ただ、正直どうやりゃ良いのかわからんのよね。
数学が得意だったらなぁ･･･。まぁ、いろいろやるしかないわね。
以下ver3。

・13:00
せっかくならRandom使いたいよね。
あと、山登りっぽくもしたいなあと思うんだけど点を消して再構成みたいなのはアホらしいから
やるのであれば評価メソッド作っちまって、解を複数作って一番高いのを～みたいにすんのが楽かなぁ。
まぁ楽云々の話以前にやり方を知らんからこれしかできないっていうのが本音だけど。
あれ･･･Random強そう･･･？提出してみるか。
19,208,174 -> 18,005,151(-1,203,023)
うっ･･･やっぱりキツいか･･･。
さっき気付いたけど昨日の時点で話していた、斜めを先に～ってのをやってなかったから
それも試してみようか。うーん･･･こういうときすんごい30分が長く感じる。
んぁ～～～待てねぇ～～～！！！！！！！やっと15分経ったけど、まだ15分あるのか･･･。
19,208,174 -> 19,235,830(+27,656)
全然伸びねぇ～～～～～～～～～～。
ただ、先に斜めの四角形の方が良いってことはわかった。
あ、今気付いた。斜めの四角、ずっとひし形しか許容してなかった･･･。
それで伸びるかな？
以下ver4。

・14:40
頭回らねぇ～～～。斜めの長方形の各頂点求めるのにこんな苦戦するとは･･･。
明日に回したくなってきた･･･。

・15:20
どうにか組めた。
19,235,830 -> 20,039,739(+803,909)
ちょっと伸びたね。やっぱり斜めが一番効くんだなぁ。
とはいえ、点数的には満足出来ないんだよなぁ･･･。
現時点での最高点は68,546,806なわけで、表示を見る限りだと理論値は5,000,000,000っぽい。
ただ、多分この点数って全格子点に印を付けられた時の点数なんじゃないかなぁって思ってるので、実質的には
どんなに高くても1,000,000,000くらいまでしか出ないんじゃないかな。
だとしたら、改善すれば今の5倍くらいはいけそうだよね。
んじゃあまずは何故印が付けられる場所を見逃すのか、ってところを突き詰めるしか無さそうだな･･･。
うぁ～～～～～～～めんどくせ～～～～～～～～！！！
今わかってるのはどっかと頂点を共有するときに誤判定してるっぽいんだけど、もう今日はやる気が出ねぇ･･･。
明日の俺、頼んだぞ･･･。

・17:20
やっぱりやる。
判定云々は置いといて、どっかに印付けたらもう一回外側からやり直すようにした。どうなるかな･･･。
ビジュアライザのN=0～2あたりを試した感じ、ちょっと伸びそう。
20,039,739 -> 20,297,831(+258,092)
超微増。やっぱり外側優先にしないといけなかったんかな。
とはいえ、まだまだ点数足りないな･･･。ゴリゴリに計算しないとダメかなぁ･･･。
booleanで適当に判定式作ってたけど、一回根本的に式を書き換えないといけないかも。
んじゃあver5として新しく作るか。

・17:40
なんで判定できないんだ･･･って漠然と思ってたけど、マニュアルで弄ってる感じ
四角の頂点を利用した斜体がクッソ苦手っぽい。･･･何故？type1とtype2で上手く弾いてるはずなんだが･･･。
ってことは･･･もしやobliqueCheckかmakeObliqueRectがぶっ壊れてんのか･･･？
えぇ･･･めんどくさ･･･。とりあえず見直すか。

・18:00
見つけた･･･。斜辺同士の判定がバグってるな･･･。
大人しく見直します。
よくわからなかったけどとりあえず交差条件から他方の延長線上に存在するかを判定。
もしいっしょなら座標から判断させた。さて、どうなるか･･･(ビジュアライザ見る限りは上昇してるが･･･)。
20,297,831 -> 25,453,429(+5,155,598)
だいぶ上がったな･･･。むしろそんなに誤判定してたのか･･･。

・19:00
=付け忘れてた～って思って再提出。
25,453,429 -> 32,881,507(+7,428,078)
ほぁぁぁぁ？！？！そんな損してたの？！？！？！
だ、だって初期解17,478,226だぞ？！+15,403,281だぞ？！二倍も？！
そ、そっかぁ･･･。もったいないことしてたなぁ･･･。
さて、ここからがAHC。どうやって解を見つけてくるか･･･。
ランダムセレクトさせるのも面白そうだけど、如何様にするか･･･。
一度はfor文で普通に作って、あとはランダムセレクトさせるか。
ん～～～ver6で。

・19:45
そういえば、スコア計算どうなってんだろって思って見たらどうやら単純な重み付き平均ではなく、
全格子点の重み付き平均で割った物らしい。はぇ～。ってことは単純な重み付き平均のみが変数として
機能してると。んじゃあ評価しやすいね。助かる。てか、中心からの直線距離の二乗+1になってんのか。

・20:15
最高に疲れた。ランダムセレクト搭載してみたけど、あんな重実装二度とやりたくない(AHC弱者)。
さて、点数はどうなるかな･･･。最初は外側から攻めてく戦法を必ず取るはずだから点数が下がるってことは
ないと思うが、果たして･･･。
32,881,507 -> 34,975,962(+2,094,455)
おぉ～良いんじゃない？ただ、思ってたより伸びなかったな･･･。印付けられる場所を見つけたらわざわざ
外に戻るのが無駄なのかな･･･。書き換えてみるか。ただ、めんどくさいんだよなぁ･･･。
ver7で。ただ、ちょっと疲れたわね･･･。明日やろうか。ゲームやりたいし。


○9/21
・8:40
書き換えたけど･･･どうだろ･･･そんな変わらなさそう。
あと、new Random()に変えてみたんだけど、再現性が無くなるから嫌いなんだよね。
うまくいくならいいんだけどさ･･･。
34,975,962 -> 35,490,189(+514,227)
微増。根本的な改良には至ってない、と･･･。
一応slipをboolean型かつローカル変数に落としたんだけどな･･･。
あ、それを言えばmasterKとmasterAnswerもそうか。ローカルにしてみっか。

・8:55
書き換えた。ついでにgc()もslip時に使うようにした。

・9:26
やっぱりgc()はやめた。ネットでやめた方が良いみたいなもの見かけたので。
代わりに4.85sまでぶん回すようにしたのと、Libraryクラスの使用をやめた。見辛いので。
というか、SimplePrinterもメソッド消して軽量化しちゃったほうが良いような気もするんだよね。
所詮ループ回数が10回増えるか増えないか程度だろうし、そんな気にする必要もない気はするけど。
35,490,189 -> 35,582,113(+91,924)
これは･･･Randomの調子としか言えないくらいの微増具合だな･･･。
さて、大体ぶん回してみてわかったけど、印を付ける順番が二倍近くの差を生むんだな･･･？
えぇ･･･そんなに？？？ってなるけど、上位陣を見る限りそうとしか言いようがないよな･･･。
あっ･･･DFS使えるんじゃねぇか？？？ただ、各状態をわざわざArrayListで保持してたらアホ
な気が･･･。いやけどマス目はN^2なわけで、最大でも1.4e7･･･いやデカいわ。
まあ同時に全部保持するわけではないから耐えられそうっちゃ耐えられそうだけど。
まずはメソッド名直しかなぁ･･･。そこが一番困るし。頑張るか･･･(めんどくさ･･･)。

・11:10
整備した。すんげぇ疲れた。そんでもって点数下がってる気がする。なんでぇ･･･？？？
メモリ食うからやりたくないけど、四方向全ての情報を保持してみる･･･？
けど新しく作る点の位置変わらないから比較するなら面積くらいなんだよな･･･。
面積小さい方がいっぱい点打てるけど、各点の点数はそんなに高くないし、
かといって面積デカいのばっかり選んでたら線が被りまくって点伸びなそう･･･。
どういうことだってばよ･･･。とりあえず、ver8で･･･。

・11:20
インデント調整にすんごい苦労してたけど、Eclipseのctrl+iがパワフル過ぎた。
while外側に付けるの発狂しかけてたけどこれならゴリゴリ書き換えられそう。

・12:00
iを固定して変化が出なくなるまでループし続けるようにした。
あと、一度作った解の最後のいくつか(Random使用)をぶっ壊してiの順序もぐっちゃぐちゃにして再構築って
感じで最適解を探させるようにした。Randomの偏りってあるのかな･･･体感は中央に偏ってる感覚なんだけど。
コードテストで試してみようか。
試した。思ってたより偏りが無かった。良かった･･･。
それはそれとして結果はどうなるんだろうか。
35,582,113 -> 35,768,540(+186,427)
誤差の範囲じゃねぇか。どうしよ･･･。とりあえず、飯食ってから考えよう。

・13:05
単純な破壊だけじゃなくて、スコア更新を10回連続でできなかったら全て破壊するようにした。
どうなるだろうね･･･。あと、システムテストでTLEが怖いからもう少し余裕持たせた方がよさそうかな。
4.8か4.75か、それくらいが良いかな。
35,582,113 -> 35,852,735(+270,622)
うん。微増だね？伸びねぇ～～～～～～！！！
Randomさんよぉ･･･もうちょっと機嫌直してくんない？？？
マニュアルで良い解法探そうとしたけどver8に負けるしさぁ･･････。
どうなったら良い点数が取れるんだ･･･？なるべく外側に印を付けるよう意識してるけど･･･。
中心に近い側に線が引けるようにする？けど、それ超めんどくさい･･･。
どっち方向に線引くかでメソッド分けるしか無いじゃん･･･やだぁ･･･。
けどあと10日もあるんだよね･･･やるしかないか･･･やだな･･････。

・13:40
人のビジュアライザの結果見た。細かく作ると良いかも･･･？打てなくなったら破壊してデカいのを
作れば良い感じの山登りになりそう。んじゃあ作るか。ver9で。

・14:30
作ったっちゃ作ったけど･･･これ･･･本当に点数上がるの･･･？
軽くサンプル回した感じそんな変わらないんだよな･･･。順番が大事ってことなんだろうけど、
どう回せば良いのかわからん･･･。とりあえずmakeLittleRectを優先させたのと、コード書くの
めんどくさくなっちゃったから普通の二重for文で格子点探してる。どうなるかな･･･。
あ、あと実行時間が怖いから4.8にした。結果は4902msだし、正解だったかも？
35,852,735 -> 35,709,619(-143,116)
Highest更新出来なかったか･･･。まぁ良いや。次は内側から試してみようか。
何故内側かって？ちっちゃいのいっぱい作れるの内側じゃん。それだけ。

・14:45
やる気あんのか？？？ってくらい点数が下がった。使いこなせね～～～。
順番がわからん･･･。Randomに頼るか･･･？いや、真偽が逆になってたわ。てへ。
まぁ、だとしてもカスみてぇな結果しか返してこないな･･･。
うーん･･･i固定が悪手か･･･？

・15:15
i固定は無くして、更新される度に外から攻めてく戦法+ランダムセレクトで。
あと、破壊して良くしてく戦法も取り入れた。ただ、更新どれくらいが良いんだろうな･･･。
10は長すぎるかなって思って5にしたけど、これが吉と出るか凶と出るか･･･。
TLEしちゃった･･･。そうか･･･while(true)を抜け出すのに時間がかかる場合があるのか･･･。

・15:45
提出制限待てねぇ～～～！！！！！！！！！！！！！！！！
とりあえず、これを提出したら今日は終わりかな･･･(昨日もこんなこと言って続けてた)。
35,852,735 -> 35,202,257(-650,478)
ダメだこりゃ･･･。パトラッシュ･･･僕はもう疲れたよ･･･。


○9/22
・16:40
体調が悪くてサボってた。パラメータ弄ってみるか･･･。
ユーザースクリプトを入れたので、更新頻度の所だけ弄ってみる。
ただ、どう提出すんのかわかってないからどうなるのかなって不安が･･･。
1･･･35,135,184
2･･･35,482,105
3･･･35,367,964
4･･･35,370,187
5･･･35,225,333
ちゃんと動いてた。良かった。
ただ、いまいち差が無いな･･･。強いて言えば2が最高値ってだけで･･･。
とりあえず、Randomのシードを無しにした。これで様子見。
問題はこれ以上の改良はどうすれば良いか、って話なんだよなぁ。
35,271,881
カス過ぎる･･･。もう･･･明日以降考えます･･･。


○9/23
・9:10
ver10に切り替えた。点をいっぱい数えるとちっちゃい四角を作りたがるようにした。
特に深い意味は無い。
35,273,543か･･･。
変わらねぇ～～～～！！！！！！！もう解き方が間違ってるんだろうな。
後で考えよ･･･。

・20:50
思いついたけどやる気が出ないから気が向いたらやる。
先に点が打てる場所を全部探して、それぞれ打ったときにどれくらい点数が伸びるか、
打つことによって打てる点がいくつ減っていくつ増えるのかを評価し、最善手を探す。
それを繰り返す。ただ、全部探すのにO(N^2)、点数はO(1)、いくつ減るかはO(N^2)、
いくつ増えるかもO(N^2)なわけで、全体の計算量は探す×(点数+増+減)なのでO(N^4)。
N≦61なので、61^4=13845841≒1.4e7。そしてこれを終わるまで繰り返すわけなので、さらにN^2かけて
最悪計算量はO(N^6)。N^6≦61^6≒5.2e10。
いやまぁさすがに全部の格子点に打てるとは思えないから十分速く終わるとは思うんだけど(他者の見る限り)、
全部打ち終わる前に終わっちゃう場合があるんだよね･･･。
あ、そもそも打てる場所を探すときに全部と比較するからO(KN^6)か。まぁKはわからんから何とも言えないけど。
打てる候補をもっと絞れないか･･･？最初はO(M^3)でいけそうな気もするけど、結局はO((M+K)^3)なわけで、
KによってはO(N^2)よりクッソデカくなるからね。うーん･･･わかんねぇ～～～。
まぁ、後から考えれば良いか。明日以降のやる気が出たときの俺、頼んだぞ･･･。


○9/25
・16:40
うぅ･･･めんどくせぇ･･･。
これやるって言ったらメソッドも書き換えなきゃじゃん･･･。
チッ･･･ver11で。
しっかりオブジェクト指向でやろうか･･･。

・17:55
超書き換えた。結果を待とう。
TLEが出たから4.8から4.5に。
23,110,520
ひっく･･･。このシステムは最初何個かにしか使わなくて良いような･･･。

・19:10
外に打つようにしてみた。
22,714,814
はぁぁぁぁ～～～～～～～～～？？？？？？？？？？？？
どうしろってんだよ･･･。

・21:55
疲れた。明日やろうね(丸投げ)。


○9/27
・10:25
そのままやってなかったせいで何もかも覚えてない。困った･･･。
とりあえず大量にコメント書いた。後々の為に･･･ね･･･。
ただ、何となく思うのはこのシステムは後半強いのでは？ってこと。
つまり、var10以下のシステムの破壊後に組み合わせたら良いんじゃね？ってコトなのよ。
まぁやってみないとわからないけど、やる価値はあるんじゃないかな。どうせ暇だし。
じゃあver12で。一番高かったのはver8かな。これ移植しようか。

え･･･辛･･････。
ちょうめんどくさいじゃん･･･。
えぇ･･･どうしよ･･･まぁ･･･やるしかないか･･･。

・11:00
あ、実行時間が超ネックだったけど、同じ距離の点しか見ないようにすれば超爆速になるのでは･･･？！
ver13で書くか(ver12は保留で)。

・11:50
気付いてしまった･･･。
コメントアウトしてたときに間違ってかぶり判定の一行消しちゃってたから伸びないんだ･･･。
クソが･･･。なんてこった･･･。どうやらver11以降は間違ってるっぽいからver13だけ直しといた。
ver11も直したけど大してスコアが変わらなかった。ってことでver13を改築していこうか。

・12:05
とりあえずそれっぽく作ったので提出。
悪くはないと思うが･･･果たして･･･。
35,282,878
最高値･･･ではないが、まぁまぁ良いんじゃなかろうか。
ただ、1位に届かないっすねぇ･･･。別ゲーやってんのかな？

・12:55
もっと書き換えた。やっぱ破壊して更新が強そう。
ただ、これどうやるのが正解なのかわからんのよね･･･。
とりあえずaddAllで新しいオブジェクト作ってからいろいろ加工してるけどO(K)かかるわけじゃん？
もっと高速化したいよね～～～。
35,521,797
頭打ち感が強すぎる。どうすんのよこれ･･･。

・13:15
あっ･･･斜めの長方形の面積比較が間違ってた･･･(まっすぐな長方形として計算してた)。
変わるかな･･･どうだろ･･･。
35,531,134
微増･･･。うーん･･･。

・13:55
なんか他の人の過去のコード見てるとpublicじゃなくてprivateにしてるね。
つい癖でpublicって書いてたけどなるべくprivateにしたほうが早かったりするのかな。
とりあえずいろいろ弄って提出。
35,514,868
そうか･･･

・14:30
35,510,448
いろいろ書き換えたけどなお変わらず(ちなみに比較方法が間違ってました(致命的))。

・16:20
35,710,613
もう･･･上がらねぇんじゃ･･･。

